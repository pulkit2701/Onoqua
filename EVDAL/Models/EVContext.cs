// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EVDAL.Models;

public partial class EVContext : DbContext
{
    public EVContext(DbContextOptions<EVContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ChargeLocation> ChargeLocation { get; set; }

    public virtual DbSet<ChargeLog> ChargeLog { get; set; }

    public virtual DbSet<ChargePoints> ChargePoints { get; set; }

    public virtual DbSet<Client> Client { get; set; }

    public virtual DbSet<ClientPrice> ClientPrice { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<ElectricCharge> ElectricCharge { get; set; }

    public virtual DbSet<Makes> Makes { get; set; }

    public virtual DbSet<Payments> Payments { get; set; }

    public virtual DbSet<Pricing> Pricing { get; set; }

    public virtual DbSet<Qrcodes> Qrcodes { get; set; }

    public virtual DbSet<Vehicle> Vehicle { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ChargeLocation>(entity =>
        {
            entity.Property(e => e.ChargeLocationId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Client).WithMany(p => p.ChargeLocation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChargeLocation_Client");
        });

        modelBuilder.Entity<ChargeLog>(entity =>
        {
            entity.Property(e => e.ChargeLogId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.ChargePoint).WithMany(p => p.ChargeLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChargeLog_ChargePoints");

            entity.HasOne(d => d.ElectricCharge).WithMany(p => p.ChargeLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChargeLog_ElectricCharge");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.ChargeLog)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChargeLog_Vehicle");
        });

        modelBuilder.Entity<ChargePoints>(entity =>
        {
            entity.Property(e => e.ChargePointId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.ChargeLocation).WithMany(p => p.ChargePoints)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChargePoints_ChargeLocation");
        });

        modelBuilder.Entity<ClientPrice>(entity =>
        {
            entity.HasOne(d => d.Client).WithMany(p => p.ClientPrice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientPrice_Client");

            entity.HasOne(d => d.Price).WithMany(p => p.ClientPrice)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ClientPrice_Pricing");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.Address1).IsFixedLength();
            entity.Property(e => e.Address2).IsFixedLength();
            entity.Property(e => e.City).IsFixedLength();
            entity.Property(e => e.FirstName).IsFixedLength();
            entity.Property(e => e.LastName).IsFixedLength();
            entity.Property(e => e.State).IsFixedLength();
            entity.Property(e => e.Zip).IsFixedLength();
        });

        modelBuilder.Entity<ElectricCharge>(entity =>
        {
            entity.Property(e => e.ElectricChargeId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Makes>(entity =>
        {
            entity.Property(e => e.MakeId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Payments>(entity =>
        {
            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Payments_Customer");
        });

        modelBuilder.Entity<Qrcodes>(entity =>
        {
            entity.HasOne(d => d.ChargePoint).WithMany(p => p.Qrcodes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRCodes_ChargePoints");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.Property(e => e.VehicleId).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Customer).WithMany(p => p.Vehicle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehicle_Customer");

            entity.HasOne(d => d.Make).WithMany(p => p.Vehicle)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vehicle_Makes");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}